{{ define "response_decoders" }}
{{- /*gotype: github.com/ogen-go/ogen/gen.TemplateConfig*/ -}}
{{ $pkg := $.Package }}
{{ template "header" $ }}

{{- range $op := $.Operations }}
	{{- if $op.Responses.BlankType }}
	func decode{{ $op.Name }}Response(resp *http.Response, span trace.Span) (err error) {
		switch resp.StatusCode {
		{{- range $statusCode, $response := $op.Responses.StatusCode }}
		case {{ $statusCode }}:
			return nil
		{{- end }}
		default:
		{{- if $op.Responses.Default }}
			{{ errorf "unreachable" }}
		{{- else if $.Error }}
			defRes, err := func() (res {{ $.ErrorType.Go }}, err error) {
				{{- template "decode_response" response_elem $.Error false }}
			}()
			if err != nil {
				return errors.Wrap(err, "default")
			}
			return errors.Wrap(&defRes, "error")
		{{- else }}
			return validate.UnexpectedStatusCode(resp.StatusCode)
		{{- end }}
		}
	}
	{{- else }}
	func decode{{ $op.Name }}Response(resp *http.Response, span trace.Span) (res {{ $op.Responses.Type.Go }}, err error) {
		switch resp.StatusCode {
		{{- range $statusCode, $response := $op.Responses.StatusCode }}{{/* Range over responses */}}
		case {{ $statusCode }}:
			{{- template "decode_response" response_elem $response $op.Responses.Type.IsInterface }}
		{{- end }}
		default:
		{{- if $op.Responses.Default }}
			{{- template "decode_response" response_elem $op.Responses.Default $op.Responses.Type.IsInterface }}
		{{- else if $.Error }}
			defRes, err := func() (res {{ $.ErrorType.Go }}, err error) {
				{{- template "decode_response" response_elem $.Error false }}
			}()
			if err != nil {
				return res, errors.Wrap(err, "default")
			}
			return res, errors.Wrap(&defRes, "error")
		{{- else }}
			return res, validate.UnexpectedStatusCode(resp.StatusCode)
		{{- end }}
		}
	}
	{{- end }}
{{- end }}
{{ end }}

{{- define "decode_response" }}
{{- /*gotype: github.com/ogen-go/ogen/gen.ResponseElem*/ -}}
{{- $response := $.Response }}
{{- $ptr := $.Ptr }}
{{- if $response.NoContent }}{{/* Decode NoContent response */}}
	{{- if $response.WithHeaders }}
		var wrapper {{ $response.NoContent.Name }}
		{{- if $response.WithStatusCode }}
		wrapper.StatusCode = resp.StatusCode
		{{- end }}
		{{- template "decode_response_headers" $response }}
		return {{ if $ptr }}&{{ end }}wrapper, nil
	{{- else if $response.WithStatusCode }}
		return {{ if $ptr }}&{{ end }}{{ $response.NoContent.Name }}{
			StatusCode: resp.StatusCode,
		}, nil
	{{- else }}
		return {{ if $ptr }}&{{ end }}{{ $response.NoContent.Name }}{}, nil
	{{- end }}
{{- else }}{{/* Decode content response */}}
	ct, _, err := mime.ParseMediaType(resp.Header.Get("Content-Type"))
	if err != nil {
		return res, errors.Wrap(err, "parse media type")
	}
	switch {
	{{- range $contentType, $originalType := $response.Contents }}{{/* Range over contents */}}
		{{- if not $contentType.Mask }}
		case ct == {{ quote $contentType }}:
		{{- else }}
		case ht.MatchContentType({{ quote $contentType }}, ct):
		{{- end }}
		{{- $type := $originalType }}
		{{- if or $response.WithStatusCode $response.WithHeaders }}
			{{- $type = ($type.MustField "Response").Type }}
		{{- end }}

		{{- if $contentType.JSON }}
			b, err := io.ReadAll(resp.Body)
			if err != nil {
				return res, err
			}

			d := jx.DecodeBytes(b)
			var response {{ $type.Go }}
			if err := func() error {
				{{- template "json/dec" elem $type "response" }}
				return nil
			}(); err != nil {
				return res, err
			}
		{{- else if $type.IsStream }}
			b, err := io.ReadAll(resp.Body)
			if err != nil {
				return res, err
			}

			response := {{ $type.Name }}{Data: bytes.NewReader(b)}
		{{- else }}
			{{- errorf "%q: %s decoder not implemented" $contentType $type }}
		{{- end }}

		{{- if $response.WithHeaders }}
			var wrapper {{ $originalType.Name }}
			wrapper.Response = response
			{{- if $response.WithStatusCode }}
			wrapper.StatusCode = resp.StatusCode
			{{- end }}
			{{- template "decode_response_headers" $response }}
			return {{ if $ptr }}&{{ end }}wrapper, nil
		{{- else if $response.WithStatusCode }}
			return {{ if $ptr }}&{{ end }}{{ $originalType.Name }}{
				StatusCode: resp.StatusCode,
				Response:   response,
			}, nil
		{{- else }}
			return {{ if $ptr }}&{{ end }}response, nil
		{{- end }}
	{{- end }}{{/* Range over contents */}}
	default:
		return res, validate.InvalidContentType(ct)
	}
{{- end }}{{/* Decode content response */}}
{{- end }}

{{- define "decode_response_headers" }}
{{- $response := $ }}
h := uri.NewHeaderDecoder(resp.Header)
{{- range $_, $header := $response.Headers }}
// Parse '{{ $header.Spec.Name }}' header.
{
	cfg := uri.HeaderParameterDecodingConfig{
		Name:    {{ quote $header.Spec.Name }},
		Explode: {{ if $header.Spec.Explode}}true{{ else }}false{{ end }},
	}
	if err := h.DecodeParam(cfg, func(d uri.Decoder) error {
		{{- template "uri/decode" elem $header.Type (printf "wrapper.%s" $header.Name) }}
	}); err != nil {
		return res, errors.Wrap(err, "parse {{ $header.Spec.Name }} header")
	}
}
{{- end }}
{{- end }}
